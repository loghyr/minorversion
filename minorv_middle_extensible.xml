<!-- Copyright (C) The IETF Trust (2014) -->
<!-- Copyright (C) The Internet Society (2014) -->

<section anchor="ss:extensible" title="Extensions within Minor Versions">
  <t>
    An important goal of this document is to enable extensions to be
    made to the set of features included in an existing minor version,
    without the overhead attendant upon the creation of an entirely new
    minor version.
  </t>

  <section anchor="ss:ext:doc" title="Feature Specification Documents">
    <t>
      Each such extension will be in the form of a working-group
      standards-track document which defines a new optional feature.
      The definition of the new feature may include one or more
      "feature elements" which add to the existing XDR in ways already
      discussed in connection with the creation of new minor versions.
      Other sorts of XDR modification are not allowed.  Feature
      elements include new operations, callbacks, attributes, and
      enumeration values.  The functionality of some existing operations
      may be extended by the addition of new flags bits in existing
      flag words and new cases in existing switched unions.  New error
      codes may be added but the set of valid error codes to be
      returned by an operation is fixed, except that existing operations
      may return new errors to respond to situations that only arise
      when previously unused flag bits are set or when extensions to
      a switched union are used.
    </t>

    <t>
      Such an additional feature will become, for all intents and
      purposes, part of the current NFSv4 minor version upon publication
      of the description as a Proposed Standard, enabling such extensions
      to be used by new client and server implementations without, as
      previously required, a change in the value of the minor version field
      within the COMPOUND operation.
    </t>

    <t>
      The working group has two occasions to make sure that such
      features are appropriate ones:

      <list style='symbols'>
        <t>
          At the time the feature definition document becomes a working
          group document, the working group needs to determine, in
          addition to the feature's general compatibility with NFSv4,
          that the XDR assignments (i.e., additional values for
          operation callback and attribute numbers, and for new flags
          and switch values to be added to existing operations)
          associated with the new feature are complete and do not
          conflict with those in the existing protocol or those
          currently under development.
        </t>

        <t>
          At the time the working group document is complete, the
          working group, in addition to normal document review, can and
          should look at what prototype implementations of the feature have
          been done and use that information to determine the work-ability
          and maturity of the feature.
        </t>
      </list>
    </t>

    <t>
      Such feature definition documents would contain a number of
      items, following the pattern of the NFSv4.2 specification.
      The only difference would be that while the NFSv4.2 specification
      defines a number of features to be incorporated in NFSv4.2, the
      feature definition documents would each define a single feature.
    </t>

    <t>
      In addition to a general explanation of the feature in question,
      the items to be included in such feature definition documents
      would be:

      <list style='symbols'>
        <t>
          Description of new operations (corresponding to Sections 16
          and 17 of <xref target="NFSv42" />).
        </t>

        <t>
          Description of any modified operations (corresponding to Section
          15 of <xref target="NFSv42" />).
        </t>

        <t>
          Description of new attributes (corresponding to Section 13 of
          <xref target="NFSv42" />).
        </t>

        <t>
          Description of any added error codes (corresponding to Section
          12.1 of <xref target="NFSv42" />).
        </t>

        <t>
          A summary description of all changes made by this feature
          to the XDR definition of the protocol, including operation
          codes, attribute numbers, added flag bits and enumeration
          values, and request and response structures for new
          operations together with the other XDR extensions needed
          to support them.
        </t>

        <t>
          A listing giving the valid errors for each new operation and
          callback (corresponds to Sections 12.2 and 12.3 of
          <xref target="NFSv42" />).
        </t>

        <t>
          A table giving for each new feature element its status
          (always OPTIONAL), and its relationship to the feature
          being described (i.e., REQUIRED for every implementation
          of the feature, or OPTIONAL in the presence of the feature).
          This would be similar to the material in Section 14 of
          <xref target="NFSv42" /> but it is restricted to a single
          feature and expanded in scope to include all feature
          elements.
        </t>

        <t>
          All of the Sections required for RFC publication, such as
          "Security Considerations", "IANA considerations", etc.
        </t>
      </list>
    </t>

    <t>
      Addition of features to an existing minor version will take
      advantage of the existing NFSv4 infrastructure that allows
      optional features to be added to new minor versions, but
      without in this case requiring any change in the minor version
      number.  Adding features in this way will enable compatibility
      with existing clients and servers, who may be unaware of the
      new feature.
    </t>

    <t>
      Because the receiver of a message may be unaware of the
      existence of a specific extension, certain compatibility rules
      need to be observed.  In some cases (e.g., addition of new
      operations or callbacks or addition of new arms to an existing
      switched union) older clients or servers may be unable to do
      XDR parsing on an extension of whose existence they are
      unaware.  In other cases (e.g., error returns) there are no
      XDR parsing issues but existing clients and servers may have
      expectations as to what may validly be returned.  Detailed
      discussion of these compatibility issues appears below:

      <list style='symbols'>
        <t>
          Issues related to messages sent to the server are discussed
          in <xref target='ss:ext:compat:servers' />.
        </t>

        <t>
          Issues related to messages sent to the client are discussed
          in <xref target='ss:ext:compat:clients' />.
        </t>
      </list>
    </t>

    <section anchor='ss:ext:compat:servers' title='Compatibility Issues for Messages Sent to Servers'>
      <t>
        This section deals with compatibility issues that relate
        to messages sent to the server, i.e., requests and replies
        to callbacks.  In the case of requests, it is the responsibility
        of the client to determine whether the server in question
        supports the extension in question before sending a request
        containing it for any purpose other than determining whether
        the server is aware of the extension.  In the case of
        callback replies, the server demonstrates its awareness of
        proper parsing for callback replies by sending the associated
        callback.
      </t>

      <t>
         Regarding the handling of requests:

        <list style='symbols'>
          <t>
            Existing server implementations will return NFS4ERR_NOTSUPP
            or NFS4ERR_OP_ILLEGAL in response to any use of a new
            operation, allowing the client to determine that the
            requested operation (and potentially the feature in
            question) is not supported by the server.
          </t>

          <t>
            Clients can determine whether particular new attributes
            are supported by a given server by examining the value
            returned when the supported_attr attribute is interrogated.
            Clients need to do this before attempting to use attributes
            defined in an extension since they cannot depend on the
            server returning NFS4ERRATTRNOTSUPP for requests which
            include a mask bit corresponding to a previously unspecified
            attribute number (as opposed to one which is defined but
            unsupported).
          </t>

          <t>
            Existing server implementations that do not recognize
            new flag bits will return NFS4ERR_INVAL, enabling the
            client to determine that the new flag value is not
            supported by the server.
          </t>

          <t>
            Existing server implementations that do not recognize the
            new arm of a switched union in a request will return NFS4ERR_INVAL or
            NFS4ERR_UNION_NOTSUPP, enabling the client to determine that the
            the new union arm is not supported by the server.
          </t>
        </list>
      </t>

      <t>
        Given that some existing servers may have XDR parsing
        implementations that cannot easily accommodate previously
        unknown operations or switched union arms, clients should
        carefully determine whether particular features are supported
        by the server before proceeding to use them and need to
        be prepared to treat NFS4ERR_BADXDR as indicating non-support
        of a new operation or switched union arm where server
        support for a particular feature is being tested.
      </t>

      <t>
        Regarding the handling of responses to callbacks:

        <list style='symbols'>
          <t>
            Error values returned to the server for all callbacks that do not
            use new features will only be those previously allowed.  Only when
            the server uses a new callback extension feature can a previously
            invalid error value be returned.
          </t>

          <t>
            Callback replies may only include a new arm of an existing switched
            union when the server, typically in the callback being responded to,
            has used a feature element associated with the feature that defined
             he new switched union arm.
          </t>
        </list>
      </t>
    </section>

    <section anchor='ss:ext:compat:clients' title='Compatibility Issues for Messages Sent to Clients'>
      <t>
        This sections deals with compatibility issues that relate to messages
        sent to clients, i.e., request replies and callbacks.  In both cases,
        extensions are only sent to clients that have demonstrated awareness
        of the extensions in question by using an extension associated with
        the same feature.
      </t>

      <t>
        Regarding the handling of request replies:

        <list style='symbols'>
          <t>
            Error values returned to the client for all requests that do not
            use new features will only be those previously allowed.  Only when
            the server uses a new callback extension feature can a previously
            invalid error value be returned.
          </t>

          <t>
            Replies may only include a new arm of an existing switched union
            when the server, typically in the request being responded to,
            has used a feature element associated with the feature that defined
            the new switched union arm.
          </t>
        </list>
      </t>

      <t>
        Regarding the handling of callbacks, the server needs to be sure that
        it only sends callbacks to those clients prepared to receive and parse them.

        <list style='symbols'>
          <t>
            In most cases, the new callback will be part of a feature that
            contains new (forward) operations as well.  When this is the case,
            the feature specification will specify the operations whose receipt
            by a server is sufficient to indicate that the client issuing them
            is prepared to accept and parse the associated callbacks.
          </t>

          <t>
            For callbacks associated with features that have no new operations
            defined, the feature specification should define some way for a
            client to indicate that it is prepared to accept and parse
            callbacks that are part of the extension.  For example, a
            flag bit in the EXCHANGE_ID request may serve this purpose.
          </t>

          <t>
            In both of the above cases, the ability to accept and parse the
            specified callback is considered separate from support for the
            callback.  The feature specification will indicate whether support
            for the callback is required whenever the feature is used by the
            client.  In cases in which support is not required, the client is
            free to return NFS4ERR_NOTSUPP upon receiving the callback.
          </t>
        </list>
      </t>
    </section>
  </section>

  <section anchor="ss:ext:addl" title="Additional Informational Documents">
    <t>
      Additional documents will be required from time to time.
      The purpose of these documents will be to organize existing
      material so that an implementer will not have to scan a
      large set of feature definition document or minor version
      specifications to find information being sought.
    </t>

    <t>
      The frequency of updates for such documents will be affected
      by implementer needs and the ability to easily generate
      such documents, preferably by automated means.  These
      documents will be informational documents whose purpose
      is to simplify use of the standards-track documents.  Some
      desirable elements would include:

      <list style='symbols'>
        <t>
          An updated XDR for the protocol as a whole including
          feature elements from all features and minor versions
          accepted as Proposed Standards.
        </t>

        <t>
          A consolidated list of XDR assignments of values (e.g., operation
          codes, attribute numbers, error codes, new flag bits, enumeration
          extensions) for all features under development (i.e., accepted as
          working-group standards-track documents but not yet published or
          abandoned).
        </t>

        <t>
          A list of all feature definition documents that have been
          approved as working group documents but have not yet been
          approved as Proposed Standards.
        </t>

        <t>
          A table mapping operations and callbacks to the most recent
          document containing a description of that operation.
        </t>

        <t>
          A table mapping attributes to the most recent document containing
          a description of that attribute.
        </t>

        <t>
          A table giving, for each operation in the protocol, the
          errors that may validly be returned for that operation.
          If possible, it would be desirable to give, as does
          <xref target="RFC5661" />, the operations which may
          validly return each particular error.
        </t>

        <t>
          A table giving for each operation, callback, and
          attribute and for each feature element in a published
          extension giving its status OPTIONAL, REQUIRED,
          RECOMMENDED, MANDATORY to NOT implement), and its
          relationship to the feature which allows its inclusion
          (i.e., REQUIRED for every implementation of the feature,
          or OPTIONAL in the presence of the feature).  This
          would be similar to the material in Section 14 of
          <xref target="NFSv42" />, expanded in scope to include
          all feature elements, and updated to include all
          published features that are part of the current NFSv4
          minor version, at the date of publication.
        </t>
      </list>
    </t>

    <t>
      The informational documents described above are desirable,
      given that minor versions beyond NFSv4.1 are not fully described
      in a single document.  Instead of a single document describing
      a minor version, there will be a number and that number
      can be expected to grow, as protocol development
      continues.
    </t>
  </section>

  <section anchor="ss:ext:relationship"
      title="Relationship Between Minor Versioning and Extensions within a Minor Version">
    <t>
      Extensibility of minor version are governed by the following rules:

      <list style="symbols">
        <t>
          Minor versions zero and one are not extensible.  Each
          has a fixed set of optional features as described in
          <xref target="RFC3530bis" /> and <xref target="RFC5661" />.
        </t>

        <t>
          Minor versions beyond one are presumed extensible as
          discussed herein. However, any statement within the
          minor version specification disallowing extension will
          cause that minor version to be considered non-extensible.
        </t>

        <t>
          No new feature may be added  to a minor version may
          be made once the specification document document for
          a subsequent minor version becomes a working group
          standards-track document.
        </t>
      </list>
    </t>

    <t>
      Even when a minor version is non-extensible, or when a
      previous minor version is closed to further extension, the
      features that it contains are still subject to updates to
      effect protocol corrections.  In many cases, making an XDR
      change, in the form of an extension will be the best way
      of correcting the issue.  See <xref target="ss:correction" />
      for details.
    </t>

    <t>
      While making minor versions extensible will decrease the frequency of
      new minor versions, it will not eliminate the need for them.  In
      particular:

      <list style='symbols'>
        <t>
          A new minor version will be required for any change in the status
          of a feature element (i.e., an operation, callback, attribute,
          added flag or switch case).  For example, changes which make
          feature elements Recommended, Required or Mandatory
          to Not Implement will require a minor version.
        </t>

        <t>
          Any incompatible semantic change in the required or
          allowed processing of an existing operation or attribute
          will require a minor version.
        </t>

        <t>
          Any change that extends the set of errors returned
          that an existing operation, with the exception noted
          above.  New errors may be added when the conditions
          that give rise to these new errors cannot arise as
          long as new flag bits or switched union arms are not
          used.  I.e., when it is clear that existing client
          cannot receive these errors.
        </t>

        <t>
          Any change in the mapping of feature elements to
          features will require a minor version.  For example,
          if a feature is to be split into two separate features
          clients would no longer be able to infer support for
          one operation from support for the other, in the same
          way that had been done previously, invalidating logic
          in existing clients.
        </t>
      </list>
    </t>
  </section>
</section>
